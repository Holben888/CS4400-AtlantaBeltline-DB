{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/index.html",
    "../src/login.html",
    "../src/shared/table.html"
  ],
  "sourcesContent": [
    "<main>\n  <div class=\"content-container\">\n    <svelte:component this=\"{currPageComponent}\" />\n  </div>\n</main>\n\n<style>\n  main {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n  }\n  .content-container {\n    width: 100%;\n    max-width: 60rem;\n  }\n</style>\n\n<script>\n  import { onMount, onDestroy } from 'svelte'\n  import Login from './login.html'\n  import Dashboard from './dashboard.html'\n  import AdminUserMngr from './admin/user-mngr.html'\n  import Register from './register.html'\n  import { pageStore } from './store'\n\n  let currPageComponent = Dashboard\n\n  const pages = [\n    {\n      path: '/',\n      component: Dashboard,\n    },\n    {\n      path: '/login',\n      component: Login,\n    },\n    {\n      path: '/admin-user-mngr',\n      component: AdminUserMngr,\n    },\n    {\n      path: '/register',\n      component: Register,\n    },\n  ]\n\n  onMount(() => pageStore.set(location.pathname))\n\n  const unsubscribe = pageStore.subscribe(path => {\n    const matchingPage = pages.find(page => page.path === path)\n    if (matchingPage) {\n      currPageComponent = matchingPage.component\n    }\n  })\n\n  onDestroy(() => unsubscribe())\n</script>\n",
    "<h1>Atlanta Beltline Project</h1>\n\n<form name=\"myForm\" id=\"loginForm\" on:submit|preventDefault=\"{login}\">\n  {#if invalidLogin}\n  <p class=\"error\">Sorry, but your email or password were incorrect :(</p>\n  {/if}\n  <table>\n    <tr>\n      <td>Email:</td>\n      <td><input type=\"text\" name=\"email\" id=\"email\" /></td>\n    </tr>\n    <tr>\n      <td>Password:</td>\n      <td><input type=\"password\" name=\"password\" id=\"password\" /></td>\n    </tr>\n  </table>\n\n  <button class=\"general-button\" id=\"login\" type=\"submit\">Login</button>\n  <button class=\"general-button\" id=\"register\" onclick=\"register()\">\n    Register\n  </button>\n</form>\n\n<style>\n  .error {\n    background: hsl(0, 100%, 87%);\n    color: hsl(0, 90%, 30%);\n    padding: 0.3rem 0.6rem;\n    margin-bottom: 1rem;\n    border-radius: 0.3rem;\n    display: inline-block;\n  }\n</style>\n\n<script>\n  import fetch from './fetch'\n  import { changePage, updateUser } from './store'\n  let invalidLogin = false\n\n  const login = async () => {\n    const email = document.getElementById('email').value\n    const password = document.getElementById('password').value\n    const user = await fetch('/login', {\n      email: email,\n      password: password,\n    })\n    if (user.failed) {\n      invalidLogin = true\n    } else {\n      updateUser(user)\n      changePage('/')\n    }\n  }\n</script>\n",
    "<table id=\"email-table\" class=\"border-table\">\n  <tr class=\"border-table\">\n    {#each data.length ? Object.keys(data[0]) : [] as header}\n    <th class=\"border-table\">\n      {header}\n      <div class=\"sort-buttons\">\n        <div\n          class=\"triangle-up\"\n          on:click=\"{() => sortCallback(header, true)}\"\n        ></div>\n        <div\n          class=\"triangle-down\"\n          on:click=\"{() => sortCallback(header, false)}\"\n        ></div>\n      </div>\n    </th>\n    {/each}\n  </tr>\n  {#each data as row, index}\n  <tr\n    class=\"{index === selected ? 'selected' : ''}\"\n    on:click=\"{() => selectItem(index)}\"\n  >\n    {#each Object.values(row) as col, index}\n    <td class=\"border-table\">{col}</td>\n    {/each}\n  </tr>\n  {/each}\n</table>\n\n<style>\n  table {\n    border-collapse: collapse;\n    width: 100%;\n    cursor: pointer;\n  }\n  td,\n  tr {\n    border: 1px solid grey;\n    min-height: 3rem;\n  }\n  td {\n    padding: 1rem;\n  }\n\n  .selected {\n    background: cyan;\n  }\n\n  .sort-buttons {\n    float: right;\n    margin-left: 1rem;\n  }\n\n  .triangle-up {\n    width: 0;\n    height: 0;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-bottom: 10px solid black;\n    margin-bottom: 3px;\n    cursor: pointer;\n  }\n\n  .triangle-down {\n    width: 0;\n    height: 0;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-top: 10px solid black;\n    cursor: pointer;\n  }\n</style>\n\n<script>\n  import fetch from '../fetch'\n  import { afterUpdate } from 'svelte'\n  export let sortEndpoint = ''\n  export let setData = () => {}\n  export let selectItem = () => {}\n  export let selected = -1\n  export let data = []\n\n  const sortCallback = async (header, sortAscending) => {\n    const newData = await fetch(sortEndpoint, {\n      orderBy: header,\n      sort: sortAscending ? 'ASC' : 'DESC',\n    })\n    setData(newData || {})\n  }\n</script>\n"
  ],
  "names": [],
  "mappings": "AAOE,IAAI,cAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,AACzB,CAAC,AACD,kBAAkB,cAAC,CAAC,AAClB,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,KAAK,AAClB,CAAC;ACSD,MAAM,eAAC,CAAC,AACN,UAAU,CAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAC7B,KAAK,CAAE,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACvB,OAAO,CAAE,MAAM,CAAC,MAAM,CACtB,aAAa,CAAE,IAAI,CACnB,aAAa,CAAE,MAAM,CACrB,OAAO,CAAE,YAAY,AACvB,CAAC;ACAD,KAAK,eAAC,CAAC,AACL,eAAe,CAAE,QAAQ,CACzB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,iBAAE,CACF,EAAE,eAAC,CAAC,AACF,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,EAAE,eAAC,CAAC,AACF,OAAO,CAAE,IAAI,AACf,CAAC,AAED,SAAS,eAAC,CAAC,AACT,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,aAAa,eAAC,CAAC,AACb,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,IAAI,AACnB,CAAC,AAED,YAAY,eAAC,CAAC,AACZ,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,CACT,WAAW,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CAClC,YAAY,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CACnC,aAAa,CAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAC/B,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,cAAc,eAAC,CAAC,AACd,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,CACT,WAAW,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CAClC,YAAY,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CACnC,UAAU,CAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAC5B,MAAM,CAAE,OAAO,AACjB,CAAC"
}